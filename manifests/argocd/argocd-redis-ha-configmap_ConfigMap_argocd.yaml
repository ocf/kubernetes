apiVersion: v1
data:
  haproxy.cfg: "defaults REDIS\n  mode tcp\n  timeout connect 4s\n  timeout server\
    \ 6m\n  timeout client 6m\n  timeout check 2s\n\nlisten health_check_http_url\n\
    \  bind :8888\n  mode http\n  monitor-uri /healthz\n  option      dontlognull\n\
    # Check Sentinel and whether they are nominated master\nbackend check_if_redis_is_master_0\n\
    \  mode tcp\n  option tcp-check\n  tcp-check connect\n  tcp-check send PING\\\
    r\\n\n  tcp-check expect string +PONG\n  tcp-check send SENTINEL\\ get-master-addr-by-name\\\
    \ argocd\\r\\n\n  tcp-check expect string REPLACE_ANNOUNCE0\n  tcp-check send\
    \ QUIT\\r\\n\n  tcp-check expect string +OK\n  server R0 argocd-redis-ha-announce-0:26379\
    \ check inter 3s\n  server R1 argocd-redis-ha-announce-1:26379 check inter 3s\n\
    \  server R2 argocd-redis-ha-announce-2:26379 check inter 3s\n# Check Sentinel\
    \ and whether they are nominated master\nbackend check_if_redis_is_master_1\n\
    \  mode tcp\n  option tcp-check\n  tcp-check connect\n  tcp-check send PING\\\
    r\\n\n  tcp-check expect string +PONG\n  tcp-check send SENTINEL\\ get-master-addr-by-name\\\
    \ argocd\\r\\n\n  tcp-check expect string REPLACE_ANNOUNCE1\n  tcp-check send\
    \ QUIT\\r\\n\n  tcp-check expect string +OK\n  server R0 argocd-redis-ha-announce-0:26379\
    \ check inter 3s\n  server R1 argocd-redis-ha-announce-1:26379 check inter 3s\n\
    \  server R2 argocd-redis-ha-announce-2:26379 check inter 3s\n# Check Sentinel\
    \ and whether they are nominated master\nbackend check_if_redis_is_master_2\n\
    \  mode tcp\n  option tcp-check\n  tcp-check connect\n  tcp-check send PING\\\
    r\\n\n  tcp-check expect string +PONG\n  tcp-check send SENTINEL\\ get-master-addr-by-name\\\
    \ argocd\\r\\n\n  tcp-check expect string REPLACE_ANNOUNCE2\n  tcp-check send\
    \ QUIT\\r\\n\n  tcp-check expect string +OK\n  server R0 argocd-redis-ha-announce-0:26379\
    \ check inter 3s\n  server R1 argocd-redis-ha-announce-1:26379 check inter 3s\n\
    \  server R2 argocd-redis-ha-announce-2:26379 check inter 3s\n\n# decide redis\
    \ backend to use\n#master\nfrontend ft_redis_master\n  bind *:6379\n  use_backend\
    \ bk_redis_master\n# Check all redis servers to see if they think they are master\n\
    backend bk_redis_master\n  mode tcp\n  option tcp-check\n  tcp-check connect\n\
    \  tcp-check send PING\\r\\n\n  tcp-check expect string +PONG\n  tcp-check send\
    \ info\\ replication\\r\\n\n  tcp-check expect string role:master\n  tcp-check\
    \ send QUIT\\r\\n\n  tcp-check expect string +OK\n  use-server R0 if { srv_is_up(R0)\
    \ } { nbsrv(check_if_redis_is_master_0) ge 2 }\n  server R0 argocd-redis-ha-announce-0:6379\
    \ check inter 3s fall 1 rise 1\n  use-server R1 if { srv_is_up(R1) } { nbsrv(check_if_redis_is_master_1)\
    \ ge 2 }\n  server R1 argocd-redis-ha-announce-1:6379 check inter 3s fall 1 rise\
    \ 1\n  use-server R2 if { srv_is_up(R2) } { nbsrv(check_if_redis_is_master_2)\
    \ ge 2 }\n  server R2 argocd-redis-ha-announce-2:6379 check inter 3s fall 1 rise\
    \ 1\n"
  haproxy_init.sh: "HAPROXY_CONF=/data/haproxy.cfg\ncp /readonly/haproxy.cfg \"$HAPROXY_CONF\"\
    \nfor loop in $(seq 1 10); do\n  getent hosts argocd-redis-ha-announce-0 && break\n\
    \  echo \"Waiting for service argocd-redis-ha-announce-0 to be ready ($loop) ...\"\
    \ && sleep 1\ndone\nANNOUNCE_IP0=$(getent hosts \"argocd-redis-ha-announce-0\"\
    \ | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP0\" ]; then\n  echo \"Could not\
    \ resolve the announce ip for argocd-redis-ha-announce-0\"\n  exit 1\nfi\nsed\
    \ -i \"s/REPLACE_ANNOUNCE0/$ANNOUNCE_IP0/\" \"$HAPROXY_CONF\"\n\nif [ \"${AUTH:-}\"\
    \ ]; then\n    echo \"Setting auth values\"\n    ESCAPED_AUTH=$(echo \"$AUTH\"\
    \ | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/REPLACE_AUTH_SECRET/${ESCAPED_AUTH}/\"\
    \ \"$HAPROXY_CONF\"\nfi\nfor loop in $(seq 1 10); do\n  getent hosts argocd-redis-ha-announce-1\
    \ && break\n  echo \"Waiting for service argocd-redis-ha-announce-1 to be ready\
    \ ($loop) ...\" && sleep 1\ndone\nANNOUNCE_IP1=$(getent hosts \"argocd-redis-ha-announce-1\"\
    \ | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP1\" ]; then\n  echo \"Could not\
    \ resolve the announce ip for argocd-redis-ha-announce-1\"\n  exit 1\nfi\nsed\
    \ -i \"s/REPLACE_ANNOUNCE1/$ANNOUNCE_IP1/\" \"$HAPROXY_CONF\"\n\nif [ \"${AUTH:-}\"\
    \ ]; then\n    echo \"Setting auth values\"\n    ESCAPED_AUTH=$(echo \"$AUTH\"\
    \ | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/REPLACE_AUTH_SECRET/${ESCAPED_AUTH}/\"\
    \ \"$HAPROXY_CONF\"\nfi\nfor loop in $(seq 1 10); do\n  getent hosts argocd-redis-ha-announce-2\
    \ && break\n  echo \"Waiting for service argocd-redis-ha-announce-2 to be ready\
    \ ($loop) ...\" && sleep 1\ndone\nANNOUNCE_IP2=$(getent hosts \"argocd-redis-ha-announce-2\"\
    \ | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP2\" ]; then\n  echo \"Could not\
    \ resolve the announce ip for argocd-redis-ha-announce-2\"\n  exit 1\nfi\nsed\
    \ -i \"s/REPLACE_ANNOUNCE2/$ANNOUNCE_IP2/\" \"$HAPROXY_CONF\"\n\nif [ \"${AUTH:-}\"\
    \ ]; then\n    echo \"Setting auth values\"\n    ESCAPED_AUTH=$(echo \"$AUTH\"\
    \ | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/REPLACE_AUTH_SECRET/${ESCAPED_AUTH}/\"\
    \ \"$HAPROXY_CONF\"\nfi\n"
  init.sh: "echo \"$(date) Start...\"\nHOSTNAME=\"$(hostname)\"\nINDEX=\"${HOSTNAME##*-}\"\
    \nSENTINEL_PORT=26379\nMASTER=''\nMASTER_GROUP=\"argocd\"\nQUORUM=\"2\"\nREDIS_CONF=/data/conf/redis.conf\n\
    REDIS_PORT=6379\nREDIS_TLS_PORT=\nSENTINEL_CONF=/data/conf/sentinel.conf\nSENTINEL_TLS_PORT=\n\
    SERVICE=argocd-redis-ha\nSENTINEL_TLS_REPLICATION_ENABLED=false\nREDIS_TLS_REPLICATION_ENABLED=false\n\
    set -eu\n\nsentinel_get_master() {\nset +e\n    if [ \"$SENTINEL_PORT\" -eq 0\
    \ ]; then\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"   --tls\
    \ --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key\
    \ sentinel get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '[0-9]{1,3}\\\
    .[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    else\n        redis-cli -h \"${SERVICE}\"\
    \ -p \"${SENTINEL_PORT}\"  sentinel get-master-addr-by-name \"${MASTER_GROUP}\"\
    \ |\\\n        grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n \
    \   fi\nset -e\n}\n\nsentinel_get_master_retry() {\n    master=''\n    retry=${1}\n\
    \    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        master=$(sentinel_get_master)\n\
    \        if [ -n \"${master}\" ]; then\n            break\n        fi\n      \
    \  sleep $((sleep + i))\n    done\n    echo \"${master}\"\n}\n\nidentify_master()\
    \ {\n    echo \"Identifying redis master (get-master-addr-by-name)..\"\n    echo\
    \ \"  using sentinel (argocd-redis-ha), sentinel group name (argocd)\"\n    echo\
    \ \"  $(date)..\"\n    MASTER=\"$(sentinel_get_master_retry 3)\"\n    if [ -n\
    \ \"${MASTER}\" ]; then\n        echo \"  $(date) Found redis master (${MASTER})\"\
    \n    else\n        echo \"  $(date) Did not find redis master (${MASTER})\"\n\
    \    fi\n}\n\nsentinel_update() {\n    echo \"Updating sentinel config..\"\n \
    \   echo \"  evaluating sentinel id (\\${SENTINEL_ID_${INDEX}})\"\n    eval MY_SENTINEL_ID=\"\
    \\$SENTINEL_ID_${INDEX}\"\n    echo \"  sentinel id (${MY_SENTINEL_ID}), sentinel\
    \ grp (${MASTER_GROUP}), quorum (${QUORUM})\"\n    sed -i \"1s/^/sentinel myid\
    \ ${MY_SENTINEL_ID}\\\\n/\" \"${SENTINEL_CONF}\"\n    if [ \"$SENTINEL_TLS_REPLICATION_ENABLED\"\
    \ = true ]; then\n        echo \"  redis master (${1}:${REDIS_TLS_PORT})\"\n \
    \       sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_TLS_PORT}\
    \ ${QUORUM} \\\\n/\" \"${SENTINEL_CONF}\"\n    else\n        echo \"  redis master\
    \ (${1}:${REDIS_PORT})\"\n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP}\
    \ ${1} ${REDIS_PORT} ${QUORUM} \\\\n/\" \"${SENTINEL_CONF}\"\n    fi\n    echo\
    \ \"sentinel announce-ip ${ANNOUNCE_IP}\" >> ${SENTINEL_CONF}\n    if [ \"$SENTINEL_PORT\"\
    \ -eq 0 ]; then\n        echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_TLS_PORT})\"\
    \n        echo \"sentinel announce-port ${SENTINEL_TLS_PORT}\" >> ${SENTINEL_CONF}\n\
    \    else\n        echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_PORT})\"\n   \
    \     echo \"sentinel announce-port ${SENTINEL_PORT}\" >> ${SENTINEL_CONF}\n \
    \   fi\n}\n\nredis_update() {\n    echo \"Updating redis config..\"\n    if [\
    \ \"$REDIS_TLS_REPLICATION_ENABLED\" = true ]; then\n        echo \"  we are slave\
    \ of redis master (${1}:${REDIS_TLS_PORT})\"\n        echo \"slaveof ${1} ${REDIS_TLS_PORT}\"\
    \ >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port ${REDIS_TLS_PORT}\"\
    \ >> ${REDIS_CONF}\n    else\n        echo \"  we are slave of redis master (${1}:${REDIS_PORT})\"\
    \n        echo \"slaveof ${1} ${REDIS_PORT}\" >> \"${REDIS_CONF}\"\n        echo\
    \ \"slave-announce-port ${REDIS_PORT}\" >> ${REDIS_CONF}\n    fi\n    echo \"\
    slave-announce-ip ${ANNOUNCE_IP}\" >> ${REDIS_CONF}\n}\n\ncopy_config() {\n  \
    \  echo \"Copying default redis config..\"\n    echo \"  to '${REDIS_CONF}'\"\n\
    \    cp /readonly-config/redis.conf \"${REDIS_CONF}\"\n    echo \"Copying default\
    \ sentinel config..\"\n    echo \"  to '${SENTINEL_CONF}'\"\n    cp /readonly-config/sentinel.conf\
    \ \"${SENTINEL_CONF}\"\n}\n\nsetup_defaults() {\n    echo \"Setting up defaults..\"\
    \n    echo \"  using statefulset index (${INDEX})\"\n    if [ \"${INDEX}\" = \"\
    0\" ]; then\n        echo \"Setting this pod as master for redis and sentinel..\"\
    \n        echo \"  using announce (${ANNOUNCE_IP})\"\n        redis_update \"\
    ${ANNOUNCE_IP}\"\n        sentinel_update \"${ANNOUNCE_IP}\"\n        echo \"\
    \  make sure ${ANNOUNCE_IP} is not a slave (slaveof no one)\"\n        sed -i\
    \ \"s/^.*slaveof.*//\" \"${REDIS_CONF}\"\n    else\n        echo \"Getting redis\
    \ master ip..\"\n        echo \"  blindly assuming (${SERVICE}-announce-0) or\
    \ (${SERVICE}-server-0) are master\"\n        DEFAULT_MASTER=\"$(getent_hosts\
    \ 0 | awk '{ print $1 }')\"\n        echo \"  identified redis (may be redis master)\
    \ ip (${DEFAULT_MASTER})\"\n        if [ -z \"${DEFAULT_MASTER}\" ]; then\n  \
    \          echo \"Error: Unable to resolve redis master (getent hosts).\"\n  \
    \          exit 1\n        fi\n        echo \"Setting default slave config for\
    \ redis and sentinel..\"\n        echo \"  using master ip (${DEFAULT_MASTER})\"\
    \n        redis_update \"${DEFAULT_MASTER}\"\n        sentinel_update \"${DEFAULT_MASTER}\"\
    \n    fi\n}\n\nredis_ping() {\nset +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n\
    \        redis-cli -h \"${MASTER}\" -p \"${REDIS_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt\
    \ --cert /tls-certs/redis.crt --key /tls-certs/redis.key ping\n    else\n    \
    \    redis-cli -h \"${MASTER}\" -p \"${REDIS_PORT}\" ping\n    fi\nset -e\n}\n\
    \nredis_ping_retry() {\n    ping=''\n    retry=${1}\n    sleep=3\n    for i in\
    \ $(seq 1 \"${retry}\"); do\n        if [ \"$(redis_ping)\" = \"PONG\" ]; then\n\
    \           ping='PONG'\n           break\n        fi\n        sleep $((sleep\
    \ + i))\n        MASTER=$(sentinel_get_master)\n    done\n    echo \"${ping}\"\
    \n}\n\nfind_master() {\n    echo \"Verifying redis master..\"\n    if [ \"$REDIS_PORT\"\
    \ -eq 0 ]; then\n        echo \"  ping (${MASTER}:${REDIS_TLS_PORT})\"\n    else\n\
    \        echo \"  ping (${MASTER}:${REDIS_PORT})\"\n    fi\n    echo \"  $(date)..\"\
    \n    if [ \"$(redis_ping_retry 3)\" != \"PONG\" ]; then\n        echo \"  $(date)\
    \ Can't ping redis master (${MASTER})\"\n        echo \"Attempting to force failover\
    \ (sentinel failover)..\"\n\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n \
    \           echo \"  on sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp\
    \ (${MASTER_GROUP})\"\n            echo \"  $(date)..\"\n            if redis-cli\
    \ -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"   --tls --cacert /tls-certs/ca.crt\
    \ --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel failover \"\
    ${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n                echo \"  $(date)\
    \ Failover returned with 'NOGOODSLAVE'\"\n                echo \"Setting defaults\
    \ for this pod..\"\n                setup_defaults\n                return 0\n\
    \            fi\n        else\n            echo \"  on sentinel (${SERVICE}:${SENTINEL_PORT}),\
    \ sentinel grp (${MASTER_GROUP})\"\n            echo \"  $(date)..\"\n       \
    \     if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel failover\
    \ \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n                echo \"\
    \  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo \"Setting\
    \ defaults for this pod..\"\n                setup_defaults\n                return\
    \ 0\n            fi\n        fi\n\n        echo \"Hold on for 10sec\"\n      \
    \  sleep 10\n        echo \"We should get redis master's ip now. Asking (get-master-addr-by-name)..\"\
    \n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n            echo \"  sentinel\
    \ (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})\"\n      \
    \  else\n            echo \"  sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel\
    \ grp (${MASTER_GROUP})\"\n        fi\n        echo \"  $(date)..\"\n        MASTER=\"\
    $(sentinel_get_master)\"\n        if [ \"${MASTER}\" ]; then\n            echo\
    \ \"  $(date) Found redis master (${MASTER})\"\n            echo \"Updating redis\
    \ and sentinel config..\"\n            sentinel_update \"${MASTER}\"\n       \
    \     redis_update \"${MASTER}\"\n        else\n            echo \"$(date) Error:\
    \ Could not failover, exiting...\"\n            exit 1\n        fi\n    else\n\
    \        echo \"  $(date) Found reachable redis master (${MASTER})\"\n       \
    \ echo \"Updating redis and sentinel config..\"\n        sentinel_update \"${MASTER}\"\
    \n        redis_update \"${MASTER}\"\n    fi\n}\n\nredis_ro_update() {\n    echo\
    \ \"Updating read-only redis config..\"\n    echo \"  redis.conf set 'replica-priority\
    \ 0'\"\n    echo \"replica-priority 0\" >> ${REDIS_CONF}\n}\n\ngetent_hosts()\
    \ {\n    index=${1:-${INDEX}}\n    service=\"${SERVICE}-announce-${index}\"\n\
    \    pod=\"${SERVICE}-server-${index}\"\n    host=$(getent hosts \"${service}\"\
    )\n    if [ -z \"${host}\" ]; then\n        host=$(getent hosts \"${pod}\")\n\
    \    fi\n    echo \"${host}\"\n}\n\nmkdir -p /data/conf/\n\necho \"Initializing\
    \ config..\"\ncopy_config\n\n# where is redis master\nidentify_master\n\necho\
    \ \"Identify announce ip for this pod..\"\necho \"  using (${SERVICE}-announce-${INDEX})\
    \ or (${SERVICE}-server-${INDEX})\"\nANNOUNCE_IP=$(getent_hosts | awk '{ print\
    \ $1 }')\necho \"  identified announce (${ANNOUNCE_IP})\"\nif [ -z \"${ANNOUNCE_IP}\"\
    \ ]; then\n    \"Error: Could not resolve the announce ip for this pod.\"\n  \
    \  exit 1\nelif [ \"${MASTER}\" ]; then\n    find_master\nelse\n    setup_defaults\n\
    fi\n\nif [ \"${AUTH:-}\" ]; then\n    echo \"Setting redis auth values..\"\n \
    \   ESCAPED_AUTH=$(echo \"${AUTH}\" | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i\
    \ \"s/replace-default-auth/${ESCAPED_AUTH}/\" \"${REDIS_CONF}\" \"${SENTINEL_CONF}\"\
    \nfi\n\nif [ \"${SENTINELAUTH:-}\" ]; then\n    echo \"Setting sentinel auth values\"\
    \n    ESCAPED_AUTH_SENTINEL=$(echo \"$SENTINELAUTH\" | sed -e 's/[\\/&]/\\\\&/g');\n\
    \    sed -i \"s/replace-default-sentinel-auth/${ESCAPED_AUTH_SENTINEL}/\" \"$SENTINEL_CONF\"\
    \nfi\n\necho \"$(date) Ready...\"\n"
  redis.conf: 'dir "/data"

    port 6379

    bind 0.0.0.0

    maxmemory 0

    maxmemory-policy volatile-lru

    min-replicas-max-lag 5

    min-replicas-to-write 1

    rdbchecksum yes

    rdbcompression yes

    repl-diskless-sync yes

    save ""

    '
  sentinel.conf: "dir \"/data\"\nport 26379\nbind 0.0.0.0\n    sentinel down-after-milliseconds\
    \ argocd 10000\n    sentinel failover-timeout argocd 180000\n    maxclients 10000\n\
    \    sentinel parallel-syncs argocd 5\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: argocd-redis-ha
    app.kubernetes.io/part-of: argocd
  name: argocd-redis-ha-configmap
