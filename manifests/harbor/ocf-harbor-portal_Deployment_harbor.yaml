apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: portal
    app.kubernetes.io/instance: ocf-harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-10.0.4
  name: ocf-harbor-portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: portal
      app.kubernetes.io/instance: ocf-harbor
      app.kubernetes.io/name: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/component: portal
        app.kubernetes.io/instance: ocf-harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-10.0.4
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: portal
                  app.kubernetes.io/instance: ocf-harbor
                  app.kubernetes.io/name: harbor
              namespaces:
              - harbor
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: false
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: 'false'
        envFrom: null
        image: docker.io/bitnami/harbor-portal:2.2.2-debian-10-r2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: portal
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /opt/bitnami/nginx/conf/nginx.conf
          name: portal-config
          subPath: nginx.conf
      securityContext:
        fsGroup: 1001
      volumes:
      - configMap:
          name: ocf-harbor-portal
        name: portal-config
