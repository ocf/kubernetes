apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: registry
    app.kubernetes.io/instance: ocf-harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-10.0.4
  name: ocf-harbor-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: registry
      app.kubernetes.io/instance: ocf-harbor
      app.kubernetes.io/name: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: e33a881fb69efbb172f5b683bd7a9acc26b0e6bf279fd034db891fb7b0c47915
      labels:
        app.kubernetes.io/component: registry
        app.kubernetes.io/instance: ocf-harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-10.0.4
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: registry
                  app.kubernetes.io/instance: ocf-harbor
                  app.kubernetes.io/name: harbor
              namespaces:
              - harbor
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: false
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: 'false'
        envFrom:
        - secretRef:
            name: ocf-harbor-registry
        image: docker.io/bitnami/harbor-registry:2.2.2-debian-10-r1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: registry
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: registry
        ports:
        - containerPort: 5000
          name: registry
        - containerPort: 5001
          name: debug
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: registry
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/root.crt
          name: registry-root-certificate
          subPath: tls.crt
        - mountPath: /etc/registry/passwd
          name: registry-htpasswd
          subPath: passwd
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
      - env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: ocf-harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: ocf-harbor-jobservice
        envFrom:
        - secretRef:
            name: ocf-harbor-registry
        image: docker.io/bitnami/harbor-registryctl:2.2.2-debian-10-r2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: registryctl
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: registryctl
        ports:
        - containerPort: 8080
          name: registryctl
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: registryctl
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
        - mountPath: /etc/registryctl/config.yml
          name: registry-config
          subPath: ctl-config.yml
      initContainers: null
      securityContext:
        fsGroup: 1001
      volumes:
      - name: registry-htpasswd
        secret:
          items:
          - key: REGISTRY_HTPASSWD
            path: passwd
          secretName: ocf-harbor-registry
      - name: registry-root-certificate
        secret:
          secretName: ocf-harbor-core
      - configMap:
          name: ocf-harbor-registry
        name: registry-config
      - name: registry-data
        persistentVolumeClaim:
          claimName: ocf-harbor-registry
